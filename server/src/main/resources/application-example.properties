# Copy this file to application.properties (which is gitignored) and fill in real values.
# NEVER commit secrets. Use environment variables in production where possible.

# Application
spring.application.name=tendora_server

# Database (PostgreSQL)

spring.datasource.url=${DB_URL:jdbc:postgresql://localhost:5432/tendora}
spring.datasource.username=${DB_USER:postgres}
spring.datasource.password=${DB_PASSWORD:password}

# Connection Pool (adjust as needed)
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=1
spring.datasource.hikari.connection-timeout=30000
spring.datasource.hikari.idle-timeout=600000
spring.datasource.hikari.max-lifetime=1200000

# JPA / Hibernate
# ddl-auto options: validate | update | create | create-drop | none
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.datasource.hikari.data-source-properties.prepareThreshold=0

# Mail (use app password / env vars)
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME:example@gmail.com}
spring.mail.password=${MAIL_PASSWORD:changeme}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# JWT
jwt.auth.app=tendora_server
jwt.auth.secret_key=${JWT_SECRET:CHANGE_ME_DEV_SECRET}
jwt.auth.expires_in=3600

# Google OAuth2 (leave blank or env var overrides)
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:}
spring.security.oauth2.client.registration.google.scope=profile, email
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/login/oauth2/code/google
spring.security.oauth2.client.registration.google.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.google.client-name=Google
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo

# Stripe (secret key via env var)
stripe.secret.key=${STRIPE_SECRET_KEY:sk_test_change_me}

# Cloudinary
cloudinary.cloud_name=${CLOUDINARY_CLOUD_NAME:}
cloudinary.api_key=${CLOUDINARY_API_KEY:}
cloudinary.api_secret=${CLOUDINARY_API_SECRET:}

# File upload limits
spring.servlet.multipart.max-request-size=20MB
spring.servlet.multipart.max-file-size=20MB
